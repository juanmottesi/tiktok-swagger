openapi: 3.0.1
info:
  title: Rotten tomatoes
  description: My Application
  version: '1.0'
paths:
  /login:
    post:
      tags:
        - Auth
      summary: Post login
      operationId: postLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginDTO'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'

        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'

        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'

  /register:
    post:
      tags:
        - Auth
      summary: Post register
      operationId: postRegister
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegisterDTO'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'

        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'

  /user:
    get:
      tags:
        - User
      summary: Get user
      description: Trae al usuario que definido por el token JWT del header
      operationId: getUser
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWithReviewsDTO'

        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'

  /user/{id}:
    get:
      tags:
        - User
      summary: Get user with id
      description: Trae al usuario con el id pasado en el parametro
      operationId: getUserWithId
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWithReviewsDTO'

        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'

  /content/latest:
    get:
      tags:
        - Content
      summary: Get content latest
      description: Se traen las ultimas 10 películas agregadas
      operationId: getContentLatest
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultSimpleMoviesDTO'

  /content/top:
    get:
      tags:
        - Content
      summary: Get content top
      description: Se traen las 10 películas con mayor puntuacion segun las review cargadas del sistema
      operationId: getContentTop
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultSimpleMoviesDTO'

  /content/{id}:
    get:
      tags:
        - Content
      summary: Get content with id
      description: Trae el contenido con el id pasado en el parametro
      operationId: getContentWithId
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieDTO'

        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'

    post:
      tags:
        - Review
      summary: Post content with id
      description: Agrega una review al usuario, definido por el token, a la pelicula definida por el parametro de la url
      operationId: postContentWithId
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewDTO'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleReviewDTO'

        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'

  /categories:
    get:
      tags:
        - Categories
      summary: Get categories
      description: Trae todas las categorias cargadas en el sistema
      operationId: getCategories
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultCategoriesDTO'

  /categories/{id}:
    get:
      tags:
        - Categories
      summary: Get categories with id
      description: Trae todas las peliculas que tengan la categoria (la categoria esta definida por el id del parametro)
      operationId: getCategoriesWithId
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultSimpleMoviesDTO'

components:
  schemas:
    UserLoginDTO:
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    UserDTO:
      required:
        - email
        - id
        - image
        - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        image:
          type: string
        email:
          type: string
    ErrorDTO:
      required:
        - message
      type: object
      properties:
        message:
          type: string
    UserRegisterDTO:
      required:
        - email
        - image
        - name
        - password
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        image:
          type: string
        name:
          type: string
    Category:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    SimpleMovieDTO:
      required:
        - categories
        - description
        - id
        - poster
        - score
        - title
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        poster:
          type: string
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Category'
        score:
          type: integer
          format: int32
    SimpleReviewDTO:
      required:
        - id
        - movie
        - stars
        - text
        - user
      type: object
      properties:
        id:
          type: string
        user:
          $ref: '#/components/schemas/UserDTO'
        movie:
          $ref: '#/components/schemas/SimpleMovieDTO'
        text:
          type: string
        stars:
          type: integer
          format: int32
    UserWithReviewsDTO:
      required:
        - email
        - id
        - image
        - name
        - reviews
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        image:
          type: string
        email:
          type: string
        reviews:
          type: array
          items:
            $ref: '#/components/schemas/SimpleReviewDTO'
    ResultSimpleMoviesDTO:
      required:
        - result
      type: object
      properties:
        result:
          type: array
          items:
            $ref: '#/components/schemas/SimpleMovieDTO'
    MovieDTO:
      required:
        - categories
        - description
        - id
        - poster
        - relatedContent
        - reviews
        - score
        - title
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        poster:
          type: string
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Category'
        relatedContent:
          type: array
          items:
            $ref: '#/components/schemas/SimpleMovieDTO'
        score:
          type: integer
          format: int32
        reviews:
          type: array
          items:
            $ref: '#/components/schemas/SimpleReviewDTO'
    ReviewDTO:
      required:
        - stars
        - text
      type: object
      properties:
        text:
          type: string
        stars:
          type: integer
          format: int32
    ResultCategoriesDTO:
      required:
        - result
      type: object
      properties:
        result:
          type: array
          items:
            $ref: '#/components/schemas/Category'
